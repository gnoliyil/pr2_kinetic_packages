/* Auto-generated by genmsg_cpp for file /tmp/buildd/ros-groovy-multimaster-experimental-0.2.1/debian/ros-groovy-multimaster-experimental/opt/ros/groovy/stacks/multimaster_experimental/app_manager/srv/StopApp.srv */
#ifndef APP_MANAGER_SERVICE_STOPAPP_H
#define APP_MANAGER_SERVICE_STOPAPP_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace app_manager
{
template <class ContainerAllocator>
struct StopAppRequest_ {
  typedef StopAppRequest_<ContainerAllocator> Type;

  StopAppRequest_()
  : name()
  {
  }

  StopAppRequest_(const ContainerAllocator& _alloc)
  : name(_alloc)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  name;


  typedef boost::shared_ptr< ::app_manager::StopAppRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::app_manager::StopAppRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct StopAppRequest
typedef  ::app_manager::StopAppRequest_<std::allocator<void> > StopAppRequest;

typedef boost::shared_ptr< ::app_manager::StopAppRequest> StopAppRequestPtr;
typedef boost::shared_ptr< ::app_manager::StopAppRequest const> StopAppRequestConstPtr;



template <class ContainerAllocator>
struct StopAppResponse_ {
  typedef StopAppResponse_<ContainerAllocator> Type;

  StopAppResponse_()
  : stopped(false)
  , error_code(0)
  , message()
  {
  }

  StopAppResponse_(const ContainerAllocator& _alloc)
  : stopped(false)
  , error_code(0)
  , message(_alloc)
  {
  }

  typedef uint8_t _stopped_type;
  uint8_t stopped;

  typedef int32_t _error_code_type;
  int32_t error_code;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _message_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  message;


  typedef boost::shared_ptr< ::app_manager::StopAppResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::app_manager::StopAppResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct StopAppResponse
typedef  ::app_manager::StopAppResponse_<std::allocator<void> > StopAppResponse;

typedef boost::shared_ptr< ::app_manager::StopAppResponse> StopAppResponsePtr;
typedef boost::shared_ptr< ::app_manager::StopAppResponse const> StopAppResponseConstPtr;


struct StopApp
{

typedef StopAppRequest Request;
typedef StopAppResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct StopApp
} // namespace app_manager

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::app_manager::StopAppRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::app_manager::StopAppRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::app_manager::StopAppRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "c1f3d28f1b044c871e6eff2e9fc3c667";
  }

  static const char* value(const  ::app_manager::StopAppRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xc1f3d28f1b044c87ULL;
  static const uint64_t static_value2 = 0x1e6eff2e9fc3c667ULL;
};

template<class ContainerAllocator>
struct DataType< ::app_manager::StopAppRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "app_manager/StopAppRequest";
  }

  static const char* value(const  ::app_manager::StopAppRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::app_manager::StopAppRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
string name\n\
\n\
";
  }

  static const char* value(const  ::app_manager::StopAppRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::app_manager::StopAppResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::app_manager::StopAppResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::app_manager::StopAppResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "1f94f0ff0fc0fde186f728634f98a3cb";
  }

  static const char* value(const  ::app_manager::StopAppResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x1f94f0ff0fc0fde1ULL;
  static const uint64_t static_value2 = 0x86f728634f98a3cbULL;
};

template<class ContainerAllocator>
struct DataType< ::app_manager::StopAppResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "app_manager/StopAppResponse";
  }

  static const char* value(const  ::app_manager::StopAppResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::app_manager::StopAppResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
bool stopped\n\
\n\
\n\
int32 error_code\n\
string message\n\
\n\
\n\
";
  }

  static const char* value(const  ::app_manager::StopAppResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::app_manager::StopAppRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.name);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct StopAppRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::app_manager::StopAppResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.stopped);
    stream.next(m.error_code);
    stream.next(m.message);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct StopAppResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<app_manager::StopApp> {
  static const char* value() 
  {
    return "57711838d4a1faddc5043a742845018b";
  }

  static const char* value(const app_manager::StopApp&) { return value(); } 
};

template<>
struct DataType<app_manager::StopApp> {
  static const char* value() 
  {
    return "app_manager/StopApp";
  }

  static const char* value(const app_manager::StopApp&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<app_manager::StopAppRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "57711838d4a1faddc5043a742845018b";
  }

  static const char* value(const app_manager::StopAppRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<app_manager::StopAppRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "app_manager/StopApp";
  }

  static const char* value(const app_manager::StopAppRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<app_manager::StopAppResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "57711838d4a1faddc5043a742845018b";
  }

  static const char* value(const app_manager::StopAppResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<app_manager::StopAppResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "app_manager/StopApp";
  }

  static const char* value(const app_manager::StopAppResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // APP_MANAGER_SERVICE_STOPAPP_H

