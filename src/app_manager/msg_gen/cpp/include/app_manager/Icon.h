/* Auto-generated by genmsg_cpp for file /tmp/buildd/ros-groovy-multimaster-experimental-0.2.1/debian/ros-groovy-multimaster-experimental/opt/ros/groovy/stacks/multimaster_experimental/app_manager/msg/Icon.msg */
#ifndef APP_MANAGER_MESSAGE_ICON_H
#define APP_MANAGER_MESSAGE_ICON_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace app_manager
{
template <class ContainerAllocator>
struct Icon_ {
  typedef Icon_<ContainerAllocator> Type;

  Icon_()
  : format()
  , data()
  {
  }

  Icon_(const ContainerAllocator& _alloc)
  : format(_alloc)
  , data(_alloc)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _format_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  format;

  typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _data_type;
  std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  data;


  typedef boost::shared_ptr< ::app_manager::Icon_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::app_manager::Icon_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Icon
typedef  ::app_manager::Icon_<std::allocator<void> > Icon;

typedef boost::shared_ptr< ::app_manager::Icon> IconPtr;
typedef boost::shared_ptr< ::app_manager::Icon const> IconConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::app_manager::Icon_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::app_manager::Icon_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace app_manager

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::app_manager::Icon_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::app_manager::Icon_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::app_manager::Icon_<ContainerAllocator> > {
  static const char* value() 
  {
    return "e378a502c24c5aa2af7065d57c580d12";
  }

  static const char* value(const  ::app_manager::Icon_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xe378a502c24c5aa2ULL;
  static const uint64_t static_value2 = 0xaf7065d57c580d12ULL;
};

template<class ContainerAllocator>
struct DataType< ::app_manager::Icon_<ContainerAllocator> > {
  static const char* value() 
  {
    return "app_manager/Icon";
  }

  static const char* value(const  ::app_manager::Icon_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::app_manager::Icon_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# Image data format.  \"jpeg\" or \"png\"\n\
string format\n\
\n\
# Image data.\n\
uint8[] data\n\
\n\
";
  }

  static const char* value(const  ::app_manager::Icon_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::app_manager::Icon_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.format);
    stream.next(m.data);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Icon_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::app_manager::Icon_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::app_manager::Icon_<ContainerAllocator> & v) 
  {
    s << indent << "format: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.format);
    s << indent << "data[]" << std::endl;
    for (size_t i = 0; i < v.data.size(); ++i)
    {
      s << indent << "  data[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.data[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // APP_MANAGER_MESSAGE_ICON_H

